apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "names.fullname" . }}
  labels:
    {{- include "kub2.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "kub2.selectorLabels" . | nindent 6 }}
  {{- if .Values.updateStrategy }}
  strategy: {{- toYaml .Values.updateStrategy | nindent 4 }}
  {{- end }}
  template:
    metadata:
      labels: {{- include "labels.standard" . | nindent 8 }}
        {{- if .Values.commonLabels }}
        {{- include "tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 8 }}
        {{- end }}
        {{- if .Values.podLabels }}
        {{- include "tplvalues.render" (dict "value" .Values.podLabels "context" $) | nindent 8 }}
        {{- end }}
      annotations:
        {{- if .Values.podAnnotations }}
        {{- include "tplvalues.render" (dict "value" .Values.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
    spec:
      #{{- include "drupal.imagePullSecrets" . | nindent 6 }}
      imagePullSecrets:
        - name: ghcr-secret
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{- include "tplvalues.render" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAffinityPreset "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAntiAffinityPreset "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.nodeAffinityPreset.type "key" .Values.nodeAffinityPreset.key "values" .Values.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      initContainers:
        {{- if .Values.initContainers }}
        {{- include "tplvalues.render" (dict "value" .Values.initContainers "context" $) | nindent 8 }}
        {{- end }}
        {{- if and .Values.volumePermissions.enabled .Values.persistence.enabled }}
        - name: volume-permissions
          image: {{ include "drupal.volumePermissions.image" . }}
          imagePullPolicy: {{ .Values.volumePermissions.image.pullPolicy | quote }}
          command:
            - sh
            - -c
            - |
              mkdir -p "/var/www/html/web/sites/default/files"
              chown -R "{{ .Values.containerSecurityContext.runAsUser }}:{{ .Values.podSecurityContext.fsGroup }}" "/var/www/html/web/sites/default/files"
          securityContext:
            runAsUser: 0
          {{- if .Values.volumePermissions.resources }}
          resources: {{- toYaml .Values.volumePermissions.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: drupal-data
              mountPath: /var/www/html/web/sites/default/files
        {{- end }}
        {{- if .Values.certificates.customCAs }}
        - name: certificates
          image: {{ template "certificates.image" . }}
          imagePullPolicy: {{ default .Values.image.pullPolicy .Values.certificates.image.pullPolicy }}
          imagePullSecrets:
          {{- range (default .Values.image.pullSecrets .Values.certificates.image.pullSecrets) }}
            - name: {{ . }}
          {{- end }}
          command:
          {{- if .Values.certificates.command }}
          command: {{- include "tplvalues.render" (dict "value" .Values.certificates.command "context" $) | nindent 12 }}
          {{- else if .Values.certificates.customCertificate.certificateSecret }}
          - sh
          - -c
          - install_packages ca-certificates openssl
          {{- else }}
          - sh
          - -c
          - install_packages ca-certificates openssl
            && openssl req -new -x509 -days 3650 -nodes -sha256
              -subj "/CN=$(hostname)" -addext "subjectAltName = DNS:$(hostname)"
              -out  /etc/ssl/certs/ssl-cert-snakeoil.pem
              -keyout /etc/ssl/private/ssl-cert-snakeoil.key -extensions v3_req
          {{- end }}
          {{- if .Values.certificates.args }}
          args: {{- include "tplvalues.render" (dict "value" .Values.certificates.args "context" $) | nindent 12 }}
          {{- end }}
          env: {{- include "tplvalues.render" (dict "value" .Values.certificates.extraEnvVars "context" $) | nindent 12 }}
          envFrom:
            {{- if .Values.certificates.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "tplvalues.render" (dict "value" .Values.certificates.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.certificates.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "tplvalues.render" (dict "value" .Values.certificates.extraEnvVarsSecret "context" $) }}
            {{- end }}
          volumeMounts:
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs
              readOnly: false
            - name: etc-ssl-private
              mountPath: /etc/ssl/private
              readOnly: false
            - name: custom-ca-certificates
              mountPath: /usr/local/share/ca-certificates
              readOnly: true
        {{- end }}
      containers:
        - name: {{ include "names.fullname" . }}
          image: {{ template "drupal.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.command }}
          command: {{- include "tplvalues.render" (dict "value" .Values.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.args }}
          args: {{- include "tplvalues.render" (dict "value" .Values.args "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          env:
            - name: WEB_DOCUMENT_ROOT # @NOTE variabel for https://dockerfile.readthedocs.io/en/latest/content/DockerImages/dockerfiles/php-nginx.html
              value: "/var/www/html/web" # @NOTE Bør kanskje ikke hardkodes?
            - name: WEB_ALIAS_DOMAIN
              value: {{ .Values.ingress.hostname | quote }} # @NOTE Usikker på om denne trengs å sendes videre.
            - name: DEVELOPMENT_MODE
              value: {{ ternary "true" "false" .Values.drupalDebug | quote }}
            - name: PREPROCESS_FILES
              value: {{ ternary "true" "false" .Values.drupalPreprocess | quote }}
            - name: DRUPAL_HASH_SALT
              value: {{ .Values.drupalHashSalt | quote }}
            - name: ALLOW_EMPTY_PASSWORD
              value: {{ ternary "yes" "no" .Values.allowEmptyPassword | quote }}
            - name: APACHE_HTTP_PORT_NUMBER
              value: {{ .Values.containerPorts.http | quote }}
            - name: APACHE_HTTPS_PORT_NUMBER
              value: {{ .Values.containerPorts.https | quote }}
            - name: DRUPAL_DATABASE_HOST
              value: {{ include "drupal.databaseHost" . | quote }}
            - name: DRUPAL_DATABASE_PORT_NUMBER
              value: {{ include "drupal.databasePort" . | quote }}
            - name: DRUPAL_DATABASE_NAME
              value: {{ include "drupal.databaseName" . | quote }}
            - name: DRUPAL_DATABASE_USER
              value: {{ include "drupal.databaseUserName" . | quote }}
            - name: DRUPAL_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "drupal.fullname" . }} # Fra bitnami mariadb chart.
                  key: {{ include "drupal.databasePasswordKey" . | quote }}
            {{- if .Values.extraEnvVars }}
            {{- include "tplvalues.render" (dict "value" .Values.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "tplvalues.render" (dict "value" .Values.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "tplvalues.render" (dict "value" .Values.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- if .Values.lifecycleHooks }}
          lifecycle: {{- include "tplvalues.render" (dict "value" .Values.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.containerPorts.http }}
            - name: https
              containerPort: {{ .Values.containerPorts.https }}
          {{- if .Values.resources }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: drupal-data
              mountPath: /var/www/html/web/sites/default/files
      volumes:
        - name: drupal-data
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (printf "%s-drupal" (include "names.fullname" .)) }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        {{- if .Values.extraVolumes }}
        {{- include "tplvalues.render" (dict "value" .Values.extraVolumes "context" $) | nindent 8 }}
        {{- end }}